# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from new_msgs/new_msgs.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class new_msgs(genpy.Message):
  _md5sum = "619c9b9df2b1fedcc3de82bb2afd1142"
  _type = "new_msgs/new_msgs"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8[] data

int8 Time_change
int8 step
int8 Right_Actual
int8 Right_Target
float32 Left_Actual
float32 Left_Target

float32[] pre_postion_left
float32[] pre_error_left
float32[] G_left
float32[] e_left
float32 Kp_left
float32 Ki_left

float32[] pre_postion_right
float32[] pre_error_right
float32[] G_right
float32[] e_right
float32 Kp_right
float32 Ki_right

float32[] out_left
float32[] out_right

string name

"""
  __slots__ = ['data','Time_change','step','Right_Actual','Right_Target','Left_Actual','Left_Target','pre_postion_left','pre_error_left','G_left','e_left','Kp_left','Ki_left','pre_postion_right','pre_error_right','G_right','e_right','Kp_right','Ki_right','out_left','out_right','name']
  _slot_types = ['uint8[]','int8','int8','int8','int8','float32','float32','float32[]','float32[]','float32[]','float32[]','float32','float32','float32[]','float32[]','float32[]','float32[]','float32','float32','float32[]','float32[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,Time_change,step,Right_Actual,Right_Target,Left_Actual,Left_Target,pre_postion_left,pre_error_left,G_left,e_left,Kp_left,Ki_left,pre_postion_right,pre_error_right,G_right,e_right,Kp_right,Ki_right,out_left,out_right,name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(new_msgs, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = b''
      if self.Time_change is None:
        self.Time_change = 0
      if self.step is None:
        self.step = 0
      if self.Right_Actual is None:
        self.Right_Actual = 0
      if self.Right_Target is None:
        self.Right_Target = 0
      if self.Left_Actual is None:
        self.Left_Actual = 0.
      if self.Left_Target is None:
        self.Left_Target = 0.
      if self.pre_postion_left is None:
        self.pre_postion_left = []
      if self.pre_error_left is None:
        self.pre_error_left = []
      if self.G_left is None:
        self.G_left = []
      if self.e_left is None:
        self.e_left = []
      if self.Kp_left is None:
        self.Kp_left = 0.
      if self.Ki_left is None:
        self.Ki_left = 0.
      if self.pre_postion_right is None:
        self.pre_postion_right = []
      if self.pre_error_right is None:
        self.pre_error_right = []
      if self.G_right is None:
        self.G_right = []
      if self.e_right is None:
        self.e_right = []
      if self.Kp_right is None:
        self.Kp_right = 0.
      if self.Ki_right is None:
        self.Ki_right = 0.
      if self.out_left is None:
        self.out_left = []
      if self.out_right is None:
        self.out_right = []
      if self.name is None:
        self.name = ''
    else:
      self.data = b''
      self.Time_change = 0
      self.step = 0
      self.Right_Actual = 0
      self.Right_Target = 0
      self.Left_Actual = 0.
      self.Left_Target = 0.
      self.pre_postion_left = []
      self.pre_error_left = []
      self.G_left = []
      self.e_left = []
      self.Kp_left = 0.
      self.Ki_left = 0.
      self.pre_postion_right = []
      self.pre_error_right = []
      self.G_right = []
      self.e_right = []
      self.Kp_right = 0.
      self.Ki_right = 0.
      self.out_left = []
      self.out_right = []
      self.name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4b2f().pack(_x.Time_change, _x.step, _x.Right_Actual, _x.Right_Target, _x.Left_Actual, _x.Left_Target))
      length = len(self.pre_postion_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.pre_postion_left))
      length = len(self.pre_error_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.pre_error_left))
      length = len(self.G_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.G_left))
      length = len(self.e_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.e_left))
      _x = self
      buff.write(_get_struct_2f().pack(_x.Kp_left, _x.Ki_left))
      length = len(self.pre_postion_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.pre_postion_right))
      length = len(self.pre_error_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.pre_error_right))
      length = len(self.G_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.G_right))
      length = len(self.e_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.e_right))
      _x = self
      buff.write(_get_struct_2f().pack(_x.Kp_right, _x.Ki_right))
      length = len(self.out_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.out_left))
      length = len(self.out_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.out_right))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.Time_change, _x.step, _x.Right_Actual, _x.Right_Target, _x.Left_Actual, _x.Left_Target,) = _get_struct_4b2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_postion_left = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_error_left = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.G_left = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.e_left = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.Kp_left, _x.Ki_left,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_postion_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_error_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.G_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.e_right = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.Kp_right, _x.Ki_right,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.out_left = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.out_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4b2f().pack(_x.Time_change, _x.step, _x.Right_Actual, _x.Right_Target, _x.Left_Actual, _x.Left_Target))
      length = len(self.pre_postion_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pre_postion_left.tostring())
      length = len(self.pre_error_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pre_error_left.tostring())
      length = len(self.G_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.G_left.tostring())
      length = len(self.e_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.e_left.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.Kp_left, _x.Ki_left))
      length = len(self.pre_postion_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pre_postion_right.tostring())
      length = len(self.pre_error_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pre_error_right.tostring())
      length = len(self.G_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.G_right.tostring())
      length = len(self.e_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.e_right.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.Kp_right, _x.Ki_right))
      length = len(self.out_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.out_left.tostring())
      length = len(self.out_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.out_right.tostring())
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.Time_change, _x.step, _x.Right_Actual, _x.Right_Target, _x.Left_Actual, _x.Left_Target,) = _get_struct_4b2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_postion_left = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_error_left = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.G_left = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.e_left = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.Kp_left, _x.Ki_left,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_postion_right = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pre_error_right = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.G_right = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.e_right = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.Kp_right, _x.Ki_right,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.out_left = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.out_right = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4b2f = None
def _get_struct_4b2f():
    global _struct_4b2f
    if _struct_4b2f is None:
        _struct_4b2f = struct.Struct("<4b2f")
    return _struct_4b2f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
