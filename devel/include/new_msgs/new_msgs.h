// Generated by gencpp from file new_msgs/new_msgs.msg
// DO NOT EDIT!


#ifndef NEW_MSGS_MESSAGE_NEW_MSGS_H
#define NEW_MSGS_MESSAGE_NEW_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace new_msgs
{
template <class ContainerAllocator>
struct new_msgs_
{
  typedef new_msgs_<ContainerAllocator> Type;

  new_msgs_()
    : data()
    , Time_change(0)
    , step(0)
    , Right_Actual(0)
    , Right_Target(0)
    , Left_Actual(0.0)
    , Left_Target(0.0)
    , pre_postion_left()
    , pre_error_left()
    , G_left()
    , e_left()
    , Kp_left(0.0)
    , Ki_left(0.0)
    , pre_postion_right()
    , pre_error_right()
    , G_right()
    , e_right()
    , Kp_right(0.0)
    , Ki_right(0.0)
    , out_left()
    , out_right()
    , name()  {
    }
  new_msgs_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , Time_change(0)
    , step(0)
    , Right_Actual(0)
    , Right_Target(0)
    , Left_Actual(0.0)
    , Left_Target(0.0)
    , pre_postion_left(_alloc)
    , pre_error_left(_alloc)
    , G_left(_alloc)
    , e_left(_alloc)
    , Kp_left(0.0)
    , Ki_left(0.0)
    , pre_postion_right(_alloc)
    , pre_error_right(_alloc)
    , G_right(_alloc)
    , e_right(_alloc)
    , Kp_right(0.0)
    , Ki_right(0.0)
    , out_left(_alloc)
    , out_right(_alloc)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;

   typedef int8_t _Time_change_type;
  _Time_change_type Time_change;

   typedef int8_t _step_type;
  _step_type step;

   typedef int8_t _Right_Actual_type;
  _Right_Actual_type Right_Actual;

   typedef int8_t _Right_Target_type;
  _Right_Target_type Right_Target;

   typedef float _Left_Actual_type;
  _Left_Actual_type Left_Actual;

   typedef float _Left_Target_type;
  _Left_Target_type Left_Target;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pre_postion_left_type;
  _pre_postion_left_type pre_postion_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pre_error_left_type;
  _pre_error_left_type pre_error_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _G_left_type;
  _G_left_type G_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _e_left_type;
  _e_left_type e_left;

   typedef float _Kp_left_type;
  _Kp_left_type Kp_left;

   typedef float _Ki_left_type;
  _Ki_left_type Ki_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pre_postion_right_type;
  _pre_postion_right_type pre_postion_right;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pre_error_right_type;
  _pre_error_right_type pre_error_right;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _G_right_type;
  _G_right_type G_right;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _e_right_type;
  _e_right_type e_right;

   typedef float _Kp_right_type;
  _Kp_right_type Kp_right;

   typedef float _Ki_right_type;
  _Ki_right_type Ki_right;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _out_left_type;
  _out_left_type out_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _out_right_type;
  _out_right_type out_right;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::new_msgs::new_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::new_msgs::new_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct new_msgs_

typedef ::new_msgs::new_msgs_<std::allocator<void> > new_msgs;

typedef boost::shared_ptr< ::new_msgs::new_msgs > new_msgsPtr;
typedef boost::shared_ptr< ::new_msgs::new_msgs const> new_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::new_msgs::new_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::new_msgs::new_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace new_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'new_msgs': ['/home/yuzhang/Desktop/project/siat_exo/src/new_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::new_msgs::new_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::new_msgs::new_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::new_msgs::new_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::new_msgs::new_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_msgs::new_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_msgs::new_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::new_msgs::new_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "619c9b9df2b1fedcc3de82bb2afd1142";
  }

  static const char* value(const ::new_msgs::new_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x619c9b9df2b1fedcULL;
  static const uint64_t static_value2 = 0xc3de82bb2afd1142ULL;
};

template<class ContainerAllocator>
struct DataType< ::new_msgs::new_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "new_msgs/new_msgs";
  }

  static const char* value(const ::new_msgs::new_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::new_msgs::new_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] data\n\
\n\
int8 Time_change\n\
int8 step\n\
int8 Right_Actual\n\
int8 Right_Target\n\
float32 Left_Actual\n\
float32 Left_Target\n\
\n\
float32[] pre_postion_left\n\
float32[] pre_error_left\n\
float32[] G_left\n\
float32[] e_left\n\
float32 Kp_left\n\
float32 Ki_left\n\
\n\
float32[] pre_postion_right\n\
float32[] pre_error_right\n\
float32[] G_right\n\
float32[] e_right\n\
float32 Kp_right\n\
float32 Ki_right\n\
\n\
float32[] out_left\n\
float32[] out_right\n\
\n\
string name\n\
\n\
";
  }

  static const char* value(const ::new_msgs::new_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::new_msgs::new_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.Time_change);
      stream.next(m.step);
      stream.next(m.Right_Actual);
      stream.next(m.Right_Target);
      stream.next(m.Left_Actual);
      stream.next(m.Left_Target);
      stream.next(m.pre_postion_left);
      stream.next(m.pre_error_left);
      stream.next(m.G_left);
      stream.next(m.e_left);
      stream.next(m.Kp_left);
      stream.next(m.Ki_left);
      stream.next(m.pre_postion_right);
      stream.next(m.pre_error_right);
      stream.next(m.G_right);
      stream.next(m.e_right);
      stream.next(m.Kp_right);
      stream.next(m.Ki_right);
      stream.next(m.out_left);
      stream.next(m.out_right);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct new_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::new_msgs::new_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::new_msgs::new_msgs_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "Time_change: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Time_change);
    s << indent << "step: ";
    Printer<int8_t>::stream(s, indent + "  ", v.step);
    s << indent << "Right_Actual: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Right_Actual);
    s << indent << "Right_Target: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Right_Target);
    s << indent << "Left_Actual: ";
    Printer<float>::stream(s, indent + "  ", v.Left_Actual);
    s << indent << "Left_Target: ";
    Printer<float>::stream(s, indent + "  ", v.Left_Target);
    s << indent << "pre_postion_left[]" << std::endl;
    for (size_t i = 0; i < v.pre_postion_left.size(); ++i)
    {
      s << indent << "  pre_postion_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pre_postion_left[i]);
    }
    s << indent << "pre_error_left[]" << std::endl;
    for (size_t i = 0; i < v.pre_error_left.size(); ++i)
    {
      s << indent << "  pre_error_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pre_error_left[i]);
    }
    s << indent << "G_left[]" << std::endl;
    for (size_t i = 0; i < v.G_left.size(); ++i)
    {
      s << indent << "  G_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.G_left[i]);
    }
    s << indent << "e_left[]" << std::endl;
    for (size_t i = 0; i < v.e_left.size(); ++i)
    {
      s << indent << "  e_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.e_left[i]);
    }
    s << indent << "Kp_left: ";
    Printer<float>::stream(s, indent + "  ", v.Kp_left);
    s << indent << "Ki_left: ";
    Printer<float>::stream(s, indent + "  ", v.Ki_left);
    s << indent << "pre_postion_right[]" << std::endl;
    for (size_t i = 0; i < v.pre_postion_right.size(); ++i)
    {
      s << indent << "  pre_postion_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pre_postion_right[i]);
    }
    s << indent << "pre_error_right[]" << std::endl;
    for (size_t i = 0; i < v.pre_error_right.size(); ++i)
    {
      s << indent << "  pre_error_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pre_error_right[i]);
    }
    s << indent << "G_right[]" << std::endl;
    for (size_t i = 0; i < v.G_right.size(); ++i)
    {
      s << indent << "  G_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.G_right[i]);
    }
    s << indent << "e_right[]" << std::endl;
    for (size_t i = 0; i < v.e_right.size(); ++i)
    {
      s << indent << "  e_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.e_right[i]);
    }
    s << indent << "Kp_right: ";
    Printer<float>::stream(s, indent + "  ", v.Kp_right);
    s << indent << "Ki_right: ";
    Printer<float>::stream(s, indent + "  ", v.Ki_right);
    s << indent << "out_left[]" << std::endl;
    for (size_t i = 0; i < v.out_left.size(); ++i)
    {
      s << indent << "  out_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.out_left[i]);
    }
    s << indent << "out_right[]" << std::endl;
    for (size_t i = 0; i < v.out_right.size(); ++i)
    {
      s << indent << "  out_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.out_right[i]);
    }
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEW_MSGS_MESSAGE_NEW_MSGS_H
